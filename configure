#!/usr/bin/env bash

CONFIG="config.mk"
PREFIX="/usr/local"
VERSION=$(grep "define PNGQUANT_VERSION" pngquant.c | grep -Eo "[12]\.[0-9.]+")

DEBUG=
SSE=
OPENMP=
LCMS2=
COCOA_READER=
LIBQ_ONLY=
EXTRA_CFLAGS=
EXTRA_LDFLAGS=

# make gcc default compiler unless CC is already set
CC=${CC:-gcc}

help() {
    printf "%4s %s\n" "" "$1"
}

for i in "$@"; do
    case $i in
    --help)
        echo
        help "--prefix=                     installation directory [$PREFIX]"
        help "--extra-cflags=               append to CFLAGS"
        help "--extra-ldflags=              append to LDFLAGS"
        echo
        help "--enable-debug"
        help "--enable-sse/--disable-sse    enable/disable SSE instructions"
        echo
        help "--with-openmp                 compile with multicore support"
        help "--with-lcms2                  compile with color profile support"
if [[ "$OSTYPE" =~ "darwin" ]]; then
        help "--with-cocoa                  use Cocoa framework to read files"
fi
        echo
        help "--libquant-only               build libquant library only"
        echo
        exit 0
        ;;
    # Can be set before or after configure. Latter overrides former.
    CC=*)
        CC=${i#*=}
        ;;
    --enable-debug)
        DEBUG=1
        ;;
    --enable-sse)
        SSE=1
        ;;
    --disable-sse)
        SSE=0
        ;;
    --with-openmp)
        OPENMP=1
        ;;
    --with-lcms2)
        LCMS2=1
        ;;
    --with-cocoa)
        COCOA_READER=1
        ;;
    --libquant-only)
        LIBQ_ONLY=1
        ;;
    --prefix=*)
        PREFIX=${i#*=}
        ;;
    # can be used multiple times or in quotes to set multiple flags
    --extra-cflags=*)
        EXTRA_CFLAGS="$EXTRA_CFLAGS ${i#*=}"
        ;;
    --extra-ldflags=*)
        EXTRA_LDFLAGS="$EXTRA_LDFLAG ${i#*=}"
        ;;
    *)
        echo "error: unknown switch ${i%%=*}"
        exit 1
        ;;
    esac
done

# If someone runs sudo make install as very first command, and configure later,
# $CONFIG cannot be overwritten, and must to be deleted before continuing.
if [[ -f "$CONFIG" && ! -w "$CONFIG" ]]; then
    echo "Cannot overwrite file $CONFIG! Please delete it."
    exit 1
fi

cflags() {
    CFLAGS="$CFLAGS $1"
}

lflags() {
    LDFLAGS="$LDFLAGS $1"
}

status() {
    printf "%12s: %s\n" "$1" "$2"
}

# Append to CFLAGS if compiler supports flag, with optional prerequisite.
# Fails on errors and warnings.
conditional_cflags() {
    if [ -z "$("$CC" -xc -S -o /dev/null $2 $1 <(echo) 2>&1)" ]; then
        cflags "$1"
    fi
}

# returns first matching file in directory
find_f() {
    echo $(find "$1" -not -type d -name "$2" -print -quit 2> /dev/null)
}

# returns first matching file in directory (no symlinks)
find_h() {
    echo $(find "$1" -type f -name "$2" -print -quit 2> /dev/null)
}

# returns full png.h version string
pngh_string() {
    echo "$(grep -m1 "define PNG_LIBPNG_VER_STRING" "$1" | \
            grep -Eo '"[^"]+"' | grep -Eo '[^"]+')"
}

# returns major minor version numbers from png.h
pngh_majmin() {
    local MAJ=$(grep -m1 "define PNG_LIBPNG_VER_MAJOR" "$1" | grep -Eo "[0-9]+")
    local MIN=$(grep -m1 "define PNG_LIBPNG_VER_MINOR" "$1" | grep -Eo "[0-9]+")
    echo "${MAJ}${MIN}"
}

# basic check
if ! "$CC" -xc -std=c99 <(echo "int main(){}") -o /dev/null &> /dev/null; then
    status "Compiler" "error ... $CC is no C compiler"
    echo
    exit 1
fi

status "Compiler" "$CC"

# init flags
CFLAGS="-std=c99 -O3 -fno-math-errno -funroll-loops -fomit-frame-pointer -Wall -Wno-unknown-pragmas -I."
LDFLAGS="-lm lib/libimagequant.a"

# DEBUG
if [ -z "$DEBUG" ]; then
    cflags "-DNDEBUG"
    status "Debug" "no"
else
    status "Debug" "yes"
fi

echo

# SSE
if [ -n "$SSE" ]; then
    if [ "$SSE" -eq 1 ]; then
        status "SSE" "yes"
    else
        status "SSE" "no"
    fi
else
    if [[ "$(uname -m)" =~ (amd|x86_)64 ||
          "$(grep -E -m1 "^flags" /proc/cpuinfo)" =~ "sse" ]]; then
        SSE=1
        status "SSE" "auto (yes)"
    else
        SSE=0
        status "SSE" "auto (no)"
    fi
fi
if [ "$SSE" -eq 1 ]; then
    cflags "-DUSE_SSE=1"
    cflags "-msse"
    # Silence a later ICC warning due to -msse working slightly different.
    conditional_cflags "-wd10121"
    # Must be set explicitly for GCC on x86_32. Other compilers imply it.
    conditional_cflags "-mfpmath=sse" "-msse"
else
    cflags "-DUSE_SSE=0"
fi

# OpenMP
if [ -n "$OPENMP" ]; then
    if [[ "$("$CC" -xc -E -fopenmp <(echo -e \
          "#ifdef _OPENMP
           #include <omp.h>
           #endif") 2>&1)" =~ "omp_get_thread_num" ]]; then
        cflags "-fopenmp"
        lflags "-fopenmp"
        status "OpenMP" "yes"
    else
        status "OpenMP" "error ... not supported by compiler"
        echo
        exit 1
    fi
else
    # Silence ICC warnings about omp pragmas when -fopenmp is not set.
    conditional_cflags "-wd3180"
    status "OpenMP" "no"
fi

if [ -z "$LIBQ_ONLY" ]; then

# Cocoa
if [[ "$OSTYPE" =~ "darwin" ]]; then
    if [ -n "$COCOA_READER" ]; then
        cflags "-mmacosx-version-min=10.6 -framework Cocoa -DUSE_COCOA=1"
        lflags "-mmacosx-version-min=10.6"
        status "Cocoa" "yes"
    else
        status "Cocoa" "no"
    fi
fi

echo

# libpng
SUCCESS=0
# try static in current directory first
PNGH=$(find_h . "png.h")
if [ -n "$PNGH" ]; then
    PNGH_STRING=$(pngh_string "$PNGH")
    PNGH_MAJMIN=$(pngh_majmin "$PNGH")
    if [[ -n "$PNGH_STRING" && -n "$PNGH_MAJMIN" ]]; then
        LIBPNGA=$(find_f . "libpng${PNGH_MAJMIN}.a")
        if [ -n "$LIBPNGA" ]; then
            cflags "-I${PNGH%/*}"
            lflags "${LIBPNGA}"
            status "libpng" "static (${PNGH_STRING})"
            SUCCESS=1
        fi
    fi
fi
# try shared
if [ "$SUCCESS" -eq 0 ]; then
    if pkg-config --exists libpng &> /dev/null; then
        cflags "$(pkg-config --cflags libpng)"
        lflags "$(pkg-config --libs libpng)"
        status "libpng" "shared ($(pkg-config --modversion libpng))"
        SUCCESS=1
    else
        # pairs of possible png.h and libpng.so locations
        DIRS=("/usr/local/include/ /usr/local/lib/" 
              "/usr/include/ /usr/lib/")
        for i in "${DIRS[@]}"; do
            DIR=($i)
            PNGH=$(find_h "${DIR[0]}" "png.h")
            if [ -n "$PNGH" ]; then
                PNGH_STRING=$(pngh_string "$PNGH")
                PNGH_MAJMIN=$(pngh_majmin "$PNGH")
                if [[ -n "$PNGH_STRING" && -n "$PNGH_MAJMIN" ]]; then
                    LIBPNGSO=$(find_f "${DIR[1]}" "libpng${PNGH_MAJMIN}.so*")
                    if [ -n "$LIBPNGSO" ]; then
                        cflags "-I${PNGH%/*}"
                        lflags "-L${LIBPNGSO%/*} -lpng${PNGH_MAJMIN}"
                        status "libpng" "shared (${PNGH_STRING})"
                        SUCCESS=1
                        break
                    fi
                fi
            fi
        done
    fi
fi
if [ "$SUCCESS" -eq 0 ]; then
    status "libpng" "error ... not found"
    echo
    exit 1
fi

# zlib
SUCCESS=0
# try static in current directory first
ZLIBH=$(find_h . "zlib.h")
if [ -n "$ZLIBH" ]; then
    LIBZA=$(find_f . "libz.a")
    if [ -n "$LIBZA" ]; then
        cflags "-I${ZLIBH%/*}"
        lflags "${LIBZA}"
        status "zlib" "static"
        SUCCESS=1
    fi
fi
# try shared
if [ "$SUCCESS" -eq 0 ]; then
    if pkg-config --exists zlib &> /dev/null; then
        cflags "$(pkg-config --cflags zlib)"
        lflags "$(pkg-config --libs zlib)"
        status "zlib" "shared ($(pkg-config --modversion zlib))"
        SUCCESS=1
    else
        # pairs of possible zlib.h and libz.so locations
        DIRS=("/usr/local/include/ /usr/local/lib/" 
              "/usr/include/ /usr/lib/")
        for i in "${DIRS[@]}"; do
            DIR=($i)
            ZLIBH=$(find_h "${DIR[0]}" "zlib.h")
            if [ -n "$ZLIBH" ]; then
                LIBZSO=$(find_f "${DIR[1]}" "libz.so*")
                if [ -n "$LIBZSO" ]; then
                    cflags "-I${ZLIBH%/*}"
                    lflags "-L${LIBZSO%/*} -lz"
                    status "zlib" "shared"
                    SUCCESS=1
                fi
            fi
        done
    fi
fi
if [ "$SUCCESS" -eq 0 ]; then
    status "zlib" "error ... not found"
    echo
    exit 1
fi

# lcms2
if [ -n "$LCMS2" ]; then
    SUCCESS=0
    # try static in current directory first
    LCMS2H=$(find_h . "lcms2.h")
    if [ -n "$LCMS2H" ]; then
        LIBLCMS2A=$(find_f . "liblcms2.a")
        if [ -n "$LIBLCMS2A" ]; then
            cflags "-I${LCMS2H%/*}"
            lflags "${LIBLCMS2A}"
            status "lcms2" "static"
            SUCCESS=1
        fi
    fi
    # try shared
    if [ "$SUCCESS" -eq 0 ]; then
        if pkg-config --exists lcms2 &> /dev/null; then
            cflags "$(pkg-config --cflags lcms2)"
            lflags "$(pkg-config --libs lcms2)"
            status "lcms2" "shared ($(pkg-config --modversion lcms2))"
            SUCCESS=1
        else
            # pairs of possible lcms2.h and liblcms2.so locations
            DIRS=("/usr/local/include/ /usr/local/lib/" 
                  "/usr/include/ /usr/lib/")
            for i in "${DIRS[@]}"; do
                DIR=($i)
                LCMS2H=$(find_h "${DIR[0]}" "lcms2.h")
                if [ -n "$LCMS2H" ]; then
                    LIBLCMS2SO=$(find_f "${DIR[1]}" "liblcms2.so*")
                    if [ -n "$LIBLCMS2SO" ]; then
                        cflags "-I${LCMS2H%/*}"
                        lflags "-L${LIBLCMS2SO%/*} -llcms2"
                        status "lcms2" "shared"
                        SUCCESS=1
                    fi
                fi
            done
        fi
    fi
    if [ "$SUCCESS" -eq 0 ]; then
        status "lcms2" "error ... not found"
        echo
        exit 1
    else
        cflags "-DUSE_LCMS=1"
    fi
else
    status "lcms2" "no"
fi

fi # LIBQ_ONLY

# As of GCC 4.5, 387 fp math is significantly slower in C99 mode without this.
conditional_cflags "-fexcess-precision=fast"

# Intel C++ Compiler
# This flag is technically equivalent to -march=native for GCC, but has a more
# profound effect. With ICC, code is highly optimized for a specific target
# (Intel) CPU, and generic code can be quite slow, so this flag is essential.
conditional_cflags "-xHOST"

# Disables some fp optimizations and enforces fp precision as set in the code.
conditional_cflags "-fp-model source"

# Silence a gold linker warning about string misalignment.
conditional_cflags "-falign-stack=maintain-16-byte"

if [ -n "$EXTRA_CFLAGS" ]; then
    cflags "$EXTRA_CFLAGS"
fi

if [ -n "$EXTRA_LDFLAGS" ]; then
    lflags "$EXTRA_LDFLAGS"
fi

# Overwrite previous configuration.
echo "
# auto-generated by configure
PREFIX = $PREFIX
VERSION = $VERSION
CC = $CC
CFLAGS = $CFLAGS
LDFLAGS = $LDFLAGS
LIBQ_ONLY = $LIBQ_ONLY
COCOA_READER = $COCOA_READER
" > $CONFIG
